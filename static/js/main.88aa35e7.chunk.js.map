{"version":3,"sources":["paygate/payweb.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["PayWeb","func","event","console","log","data","fmt","Date","av","Object","values","str","join","checksum","Md5","postData","then","response","statusText","headers","length","text","_","redirect","window","location","href","date","asString","onClick","e","url","fetch","method","mode","cache","credentials","referrerPolicy","body","JSON","stringify","Component","App","className","src","logo","alt","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"wVAsGeA,E,4MA1FXC,KAAO,SAACC,GACJC,QAAQC,IAAIF,GACZ,IAOIG,EAAO,CACP,WAAsB,YACtB,UAAsB,mBACtB,OAAsB,KACtB,SAAsB,MACtB,WAVS,6CAYT,iBAAsB,EAAKC,IAAI,IAAIC,MACnC,OAAsB,QACtB,QAAsB,MAEtB,MAAsB,yBAEtBC,EAAKC,OAAOC,OAAOL,GACvBF,QAAQC,IAAR,kBAAuBI,IACvB,IAAIG,EAAMH,EAAGI,KAAK,IAKdC,EAAWC,IAAIH,EA3BC,UA4BpBN,EAAI,SAAeQ,EAQnBV,QAAQC,IAAR,SACAD,QAAQC,IAAIC,GACZF,QAAQC,IAAI,cACZ,EAAKW,SAAS,sDAAuDV,GAAMW,MAAK,SAAAC,GAO5E,OANAd,QAAQC,IAAR,0BAA+Ba,IAC/Bd,QAAQC,IAAI,aACZD,QAAQC,IAAIa,GAEZd,QAAQC,IAAI,WACZD,QAAQC,IAAIa,EAASC,YACdD,KACRD,MAAK,SAAAC,GAGJ,OAFAd,QAAQC,IAAR,mCAAwCa,EAASE,QAAQC,OAAzD,MACAjB,QAAQC,IAAIa,EAASE,SACdF,KACRD,MAAK,SAAAC,GAGJ,OAFAd,QAAQC,IAAR,kBACAD,QAAQC,IAAIa,EAASI,QACdJ,KACRD,MAAK,SAAAM,Q,EAKZC,SAAW,WACPC,OAAOC,SAASC,KAAO,sD,EAG3BpB,IAAM,SAACqB,GACH,OAAOC,mBAAS,sBAAuBD,I,uDAzEjC,IAAD,OACL,OAAQ,6BACJ,4BAAQE,QAAS,SAAAC,GAAC,OAAG,EAAK7B,KAAK6B,KAA/B,U,sKA0EOC,E,+BAAM,GAAI1B,E,+BAAO,G,SAGf2B,MAAMD,EAAK,CACpBE,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbjB,QAAS,CACL,eAAgB,oBAGpBI,SAAU,SACVc,eAAgB,cAChBC,KAAMC,KAAKC,UAAUnC,K,8IA5FZoC,aCYNC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,SCEYC,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.88aa35e7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Md5 from 'blueimp-md5'\nimport {asString} from 'date-format';\n\nclass PayWeb extends Component {\n\n    render() {\n        return (<div>\n            <button onClick={e=> this.func(e)}>Pay</button>\n        </div>)\n    }\n\n    func = (event)=> {\n        console.log(event);\n        let encryptionKey = 'secret';\n        // let rdPage = 'https://my.return.url/page';\n        let rdPage = 'https://ndeoligence.github.io/paygate-demo';\n\n\n        // let expectedChecksum = 'f1ebfce69e65fe837c27529b363c2dd9';\n\n        let data = {\n            'PAYGATE_ID'        : 10011072130,\n            'REFERENCE'         : 'pgtest_123456789',\n            'AMOUNT'            : 3299,\n            'CURRENCY'          : 'ZAR',\n            'RETURN_URL'        : rdPage,\n            // 'TRANSACTION_DATE'  : timestamp,\n            'TRANSACTION_DATE'  : this.fmt(new Date()),\n            'LOCALE'            : 'en-za',\n            'COUNTRY'           : 'ZAF',\n            // 'EMAIL'             : 'customer@paygate.co.za',\n            'EMAIL'             : 'monde.ngalo@gmail.com',\n        };\n        let av = Object.values(data);\n        console.log(`Values: ${av}`);\n        let str = av.join('');\n        // let vs =\n        //     str === `10011072130pgtest_1234567893299ZAR${rdPage}${timestamp}en-zaZAFcustomer@paygate.co.za`?\n        //     'Good': 'Fail';\n        // console.log(`DataString: ${vs}`)\n        let checksum = Md5(str + encryptionKey);\n        data['CHECKSUM'] = checksum;\n        // vs = checksum === expectedChecksum? 'Good': 'Fail';\n        // console.log(`Checksum: ${vs}`);\n        // if (checksum !== expectedChecksum) {\n        //     console.log(`Expected: ${expectedChecksum}`);\n        //     console.log(`Actual  : ${checksum}`);\n        //     return;\n        // }\n        console.log(`Data:`);\n        console.log(data);\n        console.log('POSTING...');\n        this.postData('https://secure.paygate.co.za/payweb3/initiate.trans', data).then(response=> {\n            console.log(`Response data:\\n${response}`);\n            console.log('OKANYE...');\n            console.log(response);\n\n            console.log('Status:');\n            console.log(response.statusText);\n            return response;\n        }).then(response=> {\n            console.log(`Response headers: (total=${response.headers.length})`);\n            console.log(response.headers);\n            return response;\n        }).then(response=> {\n            console.log(`Response text:`);\n            console.log(response.text());\n            return response;\n        }).then(_=> {\n            // this.redirect();\n        });\n    }\n\n    redirect = ()=> {\n        window.location.href = 'https://secure.paygate.co.za/payweb3/process.trans';\n    }\n\n    fmt = (date)=> {\n        return asString('yyyy-MM-dd hh:mm:ss', date);\n    }\n\n    async postData(url = '', data = {}) {\n        // Default options are marked with *\n         // parses JSON response into native JavaScript objects\n        return await fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n    }\n\n}\n\nexport default PayWeb;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PayWeb from \"./paygate/payweb\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <PayWeb/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}