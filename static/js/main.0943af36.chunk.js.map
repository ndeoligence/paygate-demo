{"version":3,"sources":["paygate/payweb.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["email","PayWeb","initiate","formdata","FormData","append","fmt","Date","checksum","calcChecksum","redirect","data","console","log","myHeaders","Headers","urlencoded","URLSearchParams","forEach","value","key","map","fetch","method","headers","body","then","response","text","result","catch","error","collectData","Map","split","pair","match","kvArr","set","func","event","vals","values","x","push","Md5","join","date","asString","onClick","e","url","mode","cache","credentials","referrerPolicy","JSON","stringify","Component","App","className","src","logo","alt","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.0943af36.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Md5 from 'blueimp-md5'\nimport {asString} from 'date-format';\n\nconst privateKey = 'secret';\nconst email = 'monde.ngalonkulu@nimbletech.co.za';\n\nclass PayWeb extends Component {\n\n    render() {\n        return (<div>\n            <button onClick={e=> this.func(e)}>Pay</button>\n        </div>)\n    }\n\n    initiate = ()=> {\n        let formdata = new FormData();\n        formdata.append(\"PAYGATE_ID\", \"10011072130\");\n        formdata.append(\"REFERENCE\", \"pgtest_123456789\");\n        formdata.append(\"AMOUNT\", \"3299\");\n        formdata.append(\"CURRENCY\", \"ZAR\");\n        formdata.append(\"RETURN_URL\", \"https://ndeoligence.github.io/paygate-demo\");\n        formdata.append(\"TRANSACTION_DATE\", this.fmt(new Date()));\n        formdata.append(\"LOCALE\", \"en-za\");\n        formdata.append(\"COUNTRY\", \"ZAF\");\n        formdata.append(\"EMAIL\", email);\n        let checksum = this.calcChecksum(formdata, privateKey);\n        formdata.append(\"CHECKSUM\", checksum);\n        return formdata;\n    }\n\n    redirect = (data)=> {\n        console.log(\"[debug] redirect\");\n        console.log(`[debug] data:`);\n        console.log(data);\n\n        let myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n        let urlencoded = new URLSearchParams();\n        console.log(`[debug] urlencoded:`);\n        console.log(urlencoded);\n        data.forEach((value, key, map)=> {\n            urlencoded.append(key, value);\n        });\n\n        urlencoded.append(\"CHECKSUM\", this.calcChecksum(urlencoded, privateKey));\n\n        console.log(`[debug] data:`);\n        console.log(urlencoded);\n\n        let requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: urlencoded,\n            redirect: 'follow'\n        };\n\n        return fetch(\"https://secure.paygate.co.za/payweb3/query.trans\", requestOptions)\n            .then(response => response.text())\n            .then(result => console.log(result))\n            .catch(error => console.log('error', error));\n    }\n\n    collectData = (text)=> {\n        const data = new Map();\n        if (text) {\n            text.split(/[&]/).forEach(pair=> {\n                if (pair.match(/^CHECKSUM=/)) return;\n                let kvArr = pair.split(/=/);\n                data.set(kvArr[0], kvArr[1]);\n            })\n        }\n        return data;\n    }\n\n    func = (event)=> {\n        let formdata = this.initiate();\n        let requestOptions = {\n            method: 'POST',\n            body: formdata,\n            redirect: 'follow'\n        };\n\n        fetch(\"https://secure.paygate.co.za/payweb3/initiate.trans\", requestOptions)\n            .then(response => response.text())\n            .then(result => {\n                console.log(result);\n                return this.collectData(result);\n            })\n            .then(data=> {\n                console.log(data);\n                return this.redirect(data);\n            })\n            .catch(error => console.log('error', error));\n    }\n\n    calcChecksum = (data, key)=> {\n        let vals = [];\n        for (let x of data.values()) {\n            vals.push(x);\n        }\n        return Md5(`${vals.join('')}${key}`);\n    }\n\n    fmt = (date)=> {\n        return asString('yyyy-MM-dd hh:mm:ss', date);\n    }\n\n    async postData(url = '', data = {}) {\n        // Default options are marked with *\n         // parses JSON response into native JavaScript objects\n        return fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n    }\n\n}\n\nexport default PayWeb;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PayWeb from \"./paygate/payweb\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <PayWeb/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}